name: Docker vulnerability scan

on:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *"

env:
  AWS_ACCOUNT_ID: ${{ vars.STAGING_AWS_ACCOUNT_ID }}
  AWS_REGION: ca-central-1
  ECR_REPOSITORY: forms/api

permissions:
  id-token: write
  contents: write
  security-events: write

jobs:
  docker-vulnerability-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/forms-api-plan
          role-session-name: ECRPull
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Staging Amazon ECR
        id: login-ecr-staging
        uses: aws-actions/amazon-ecr-login@08fda13c2502925256496fadb53b7718f48b28c5

      - name: Docker vulnerability scan
        uses: cds-snc/security-tools/.github/actions/docker-scan@598deeaed48ab3bb0df85f0ed124ba53f0ade385 # v3.1.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-staging.outputs.registry }}
        with:
          docker_image: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"
          dockerfile_path: "Dockerfile"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Logout of Staging Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr-staging.outputs.registry }}
